Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> expression + expression
Rule 3     expression -> expression - expression
Rule 4     expression -> expression * expression
Rule 5     expression -> expression / expression
Rule 6     expression -> expression ^ pow_exp
Rule 7     expression -> - expression
Rule 8     expression -> ( expression )
Rule 9     expression -> number
Rule 10    pow_exp -> pow_exp + pow_exp
Rule 11    pow_exp -> pow_exp - pow_exp
Rule 12    pow_exp -> pow_exp * pow_exp
Rule 13    pow_exp -> pow_exp / pow_exp
Rule 14    pow_exp -> - pow_exp
Rule 15    pow_exp -> ( pow_exp )
Rule 16    pow_exp -> number
Rule 17    number -> - NUMBER
Rule 18    number -> NUMBER

Terminals, with rules where they appear

(                    : 8 15
)                    : 8 15
*                    : 4 12
+                    : 2 10
-                    : 3 7 11 14 17
/                    : 5 13
COMMENT              : 
NUMBER               : 17 18
^                    : 6
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 2 3 3 4 4 5 5 6 7 8
number               : 9 16
pow_exp              : 6 10 10 11 11 12 12 13 13 14 15
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . expression ^ pow_exp
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    -               shift and go to state 3
    (               shift and go to state 4
    NUMBER          shift and go to state 6

    statement                      shift and go to state 1
    expression                     shift and go to state 2
    number                         shift and go to state 5

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (6) expression -> expression . ^ pow_exp

    $end            reduce using rule 1 (statement -> expression .)
    +               shift and go to state 7
    -               shift and go to state 8
    *               shift and go to state 9
    /               shift and go to state 10
    ^               shift and go to state 11


state 3

    (7) expression -> - . expression
    (17) number -> - . NUMBER
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . expression ^ pow_exp
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    NUMBER          shift and go to state 13
    -               shift and go to state 3
    (               shift and go to state 4

    expression                     shift and go to state 12
    number                         shift and go to state 5

state 4

    (8) expression -> ( . expression )
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . expression ^ pow_exp
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    -               shift and go to state 3
    (               shift and go to state 4
    NUMBER          shift and go to state 6

    expression                     shift and go to state 14
    number                         shift and go to state 5

state 5

    (9) expression -> number .

    +               reduce using rule 9 (expression -> number .)
    -               reduce using rule 9 (expression -> number .)
    *               reduce using rule 9 (expression -> number .)
    /               reduce using rule 9 (expression -> number .)
    ^               reduce using rule 9 (expression -> number .)
    $end            reduce using rule 9 (expression -> number .)
    )               reduce using rule 9 (expression -> number .)


state 6

    (18) number -> NUMBER .

    +               reduce using rule 18 (number -> NUMBER .)
    -               reduce using rule 18 (number -> NUMBER .)
    *               reduce using rule 18 (number -> NUMBER .)
    /               reduce using rule 18 (number -> NUMBER .)
    ^               reduce using rule 18 (number -> NUMBER .)
    $end            reduce using rule 18 (number -> NUMBER .)
    )               reduce using rule 18 (number -> NUMBER .)


state 7

    (2) expression -> expression + . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . expression ^ pow_exp
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    -               shift and go to state 3
    (               shift and go to state 4
    NUMBER          shift and go to state 6

    expression                     shift and go to state 15
    number                         shift and go to state 5

state 8

    (3) expression -> expression - . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . expression ^ pow_exp
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    -               shift and go to state 3
    (               shift and go to state 4
    NUMBER          shift and go to state 6

    expression                     shift and go to state 16
    number                         shift and go to state 5

state 9

    (4) expression -> expression * . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . expression ^ pow_exp
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    -               shift and go to state 3
    (               shift and go to state 4
    NUMBER          shift and go to state 6

    expression                     shift and go to state 17
    number                         shift and go to state 5

state 10

    (5) expression -> expression / . expression
    (2) expression -> . expression + expression
    (3) expression -> . expression - expression
    (4) expression -> . expression * expression
    (5) expression -> . expression / expression
    (6) expression -> . expression ^ pow_exp
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    -               shift and go to state 3
    (               shift and go to state 4
    NUMBER          shift and go to state 6

    expression                     shift and go to state 18
    number                         shift and go to state 5

state 11

    (6) expression -> expression ^ . pow_exp
    (10) pow_exp -> . pow_exp + pow_exp
    (11) pow_exp -> . pow_exp - pow_exp
    (12) pow_exp -> . pow_exp * pow_exp
    (13) pow_exp -> . pow_exp / pow_exp
    (14) pow_exp -> . - pow_exp
    (15) pow_exp -> . ( pow_exp )
    (16) pow_exp -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    -               shift and go to state 20
    (               shift and go to state 21
    NUMBER          shift and go to state 6

    pow_exp                        shift and go to state 19
    number                         shift and go to state 22

state 12

    (7) expression -> - expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (6) expression -> expression . ^ pow_exp

    +               reduce using rule 7 (expression -> - expression .)
    -               reduce using rule 7 (expression -> - expression .)
    *               reduce using rule 7 (expression -> - expression .)
    /               reduce using rule 7 (expression -> - expression .)
    $end            reduce using rule 7 (expression -> - expression .)
    )               reduce using rule 7 (expression -> - expression .)
    ^               shift and go to state 11

  ! ^               [ reduce using rule 7 (expression -> - expression .) ]
  ! +               [ shift and go to state 7 ]
  ! -               [ shift and go to state 8 ]
  ! *               [ shift and go to state 9 ]
  ! /               [ shift and go to state 10 ]


state 13

    (17) number -> - NUMBER .
    (18) number -> NUMBER .

  ! reduce/reduce conflict for + resolved using rule 17 (number -> - NUMBER .)
  ! reduce/reduce conflict for - resolved using rule 17 (number -> - NUMBER .)
  ! reduce/reduce conflict for * resolved using rule 17 (number -> - NUMBER .)
  ! reduce/reduce conflict for / resolved using rule 17 (number -> - NUMBER .)
  ! reduce/reduce conflict for ^ resolved using rule 17 (number -> - NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 17 (number -> - NUMBER .)
  ! reduce/reduce conflict for ) resolved using rule 17 (number -> - NUMBER .)
    +               reduce using rule 17 (number -> - NUMBER .)
    -               reduce using rule 17 (number -> - NUMBER .)
    *               reduce using rule 17 (number -> - NUMBER .)
    /               reduce using rule 17 (number -> - NUMBER .)
    ^               reduce using rule 17 (number -> - NUMBER .)
    $end            reduce using rule 17 (number -> - NUMBER .)
    )               reduce using rule 17 (number -> - NUMBER .)

  ! +               [ reduce using rule 18 (number -> NUMBER .) ]
  ! -               [ reduce using rule 18 (number -> NUMBER .) ]
  ! *               [ reduce using rule 18 (number -> NUMBER .) ]
  ! /               [ reduce using rule 18 (number -> NUMBER .) ]
  ! ^               [ reduce using rule 18 (number -> NUMBER .) ]
  ! $end            [ reduce using rule 18 (number -> NUMBER .) ]
  ! )               [ reduce using rule 18 (number -> NUMBER .) ]


state 14

    (8) expression -> ( expression . )
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (6) expression -> expression . ^ pow_exp

    )               shift and go to state 23
    +               shift and go to state 7
    -               shift and go to state 8
    *               shift and go to state 9
    /               shift and go to state 10
    ^               shift and go to state 11


state 15

    (2) expression -> expression + expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (6) expression -> expression . ^ pow_exp

    +               reduce using rule 2 (expression -> expression + expression .)
    -               reduce using rule 2 (expression -> expression + expression .)
    $end            reduce using rule 2 (expression -> expression + expression .)
    )               reduce using rule 2 (expression -> expression + expression .)
    *               shift and go to state 9
    /               shift and go to state 10
    ^               shift and go to state 11

  ! *               [ reduce using rule 2 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 2 (expression -> expression + expression .) ]
  ! ^               [ reduce using rule 2 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 7 ]
  ! -               [ shift and go to state 8 ]


state 16

    (3) expression -> expression - expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (6) expression -> expression . ^ pow_exp

    +               reduce using rule 3 (expression -> expression - expression .)
    -               reduce using rule 3 (expression -> expression - expression .)
    $end            reduce using rule 3 (expression -> expression - expression .)
    )               reduce using rule 3 (expression -> expression - expression .)
    *               shift and go to state 9
    /               shift and go to state 10
    ^               shift and go to state 11

  ! *               [ reduce using rule 3 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 3 (expression -> expression - expression .) ]
  ! ^               [ reduce using rule 3 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 7 ]
  ! -               [ shift and go to state 8 ]


state 17

    (4) expression -> expression * expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (6) expression -> expression . ^ pow_exp

    +               reduce using rule 4 (expression -> expression * expression .)
    -               reduce using rule 4 (expression -> expression * expression .)
    *               reduce using rule 4 (expression -> expression * expression .)
    /               reduce using rule 4 (expression -> expression * expression .)
    $end            reduce using rule 4 (expression -> expression * expression .)
    )               reduce using rule 4 (expression -> expression * expression .)
    ^               shift and go to state 11

  ! ^               [ reduce using rule 4 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 7 ]
  ! -               [ shift and go to state 8 ]
  ! *               [ shift and go to state 9 ]
  ! /               [ shift and go to state 10 ]


state 18

    (5) expression -> expression / expression .
    (2) expression -> expression . + expression
    (3) expression -> expression . - expression
    (4) expression -> expression . * expression
    (5) expression -> expression . / expression
    (6) expression -> expression . ^ pow_exp

    +               reduce using rule 5 (expression -> expression / expression .)
    -               reduce using rule 5 (expression -> expression / expression .)
    *               reduce using rule 5 (expression -> expression / expression .)
    /               reduce using rule 5 (expression -> expression / expression .)
    $end            reduce using rule 5 (expression -> expression / expression .)
    )               reduce using rule 5 (expression -> expression / expression .)
    ^               shift and go to state 11

  ! ^               [ reduce using rule 5 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 7 ]
  ! -               [ shift and go to state 8 ]
  ! *               [ shift and go to state 9 ]
  ! /               [ shift and go to state 10 ]


state 19

    (6) expression -> expression ^ pow_exp .
    (10) pow_exp -> pow_exp . + pow_exp
    (11) pow_exp -> pow_exp . - pow_exp
    (12) pow_exp -> pow_exp . * pow_exp
    (13) pow_exp -> pow_exp . / pow_exp

    +               reduce using rule 6 (expression -> expression ^ pow_exp .)
    -               reduce using rule 6 (expression -> expression ^ pow_exp .)
    *               reduce using rule 6 (expression -> expression ^ pow_exp .)
    /               reduce using rule 6 (expression -> expression ^ pow_exp .)
    ^               reduce using rule 6 (expression -> expression ^ pow_exp .)
    $end            reduce using rule 6 (expression -> expression ^ pow_exp .)
    )               reduce using rule 6 (expression -> expression ^ pow_exp .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! *               [ shift and go to state 26 ]
  ! /               [ shift and go to state 27 ]


state 20

    (14) pow_exp -> - . pow_exp
    (17) number -> - . NUMBER
    (10) pow_exp -> . pow_exp + pow_exp
    (11) pow_exp -> . pow_exp - pow_exp
    (12) pow_exp -> . pow_exp * pow_exp
    (13) pow_exp -> . pow_exp / pow_exp
    (14) pow_exp -> . - pow_exp
    (15) pow_exp -> . ( pow_exp )
    (16) pow_exp -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    NUMBER          shift and go to state 13
    -               shift and go to state 20
    (               shift and go to state 21

    pow_exp                        shift and go to state 28
    number                         shift and go to state 22

state 21

    (15) pow_exp -> ( . pow_exp )
    (10) pow_exp -> . pow_exp + pow_exp
    (11) pow_exp -> . pow_exp - pow_exp
    (12) pow_exp -> . pow_exp * pow_exp
    (13) pow_exp -> . pow_exp / pow_exp
    (14) pow_exp -> . - pow_exp
    (15) pow_exp -> . ( pow_exp )
    (16) pow_exp -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    -               shift and go to state 20
    (               shift and go to state 21
    NUMBER          shift and go to state 6

    pow_exp                        shift and go to state 29
    number                         shift and go to state 22

state 22

    (16) pow_exp -> number .

    +               reduce using rule 16 (pow_exp -> number .)
    -               reduce using rule 16 (pow_exp -> number .)
    *               reduce using rule 16 (pow_exp -> number .)
    /               reduce using rule 16 (pow_exp -> number .)
    ^               reduce using rule 16 (pow_exp -> number .)
    $end            reduce using rule 16 (pow_exp -> number .)
    )               reduce using rule 16 (pow_exp -> number .)


state 23

    (8) expression -> ( expression ) .

    +               reduce using rule 8 (expression -> ( expression ) .)
    -               reduce using rule 8 (expression -> ( expression ) .)
    *               reduce using rule 8 (expression -> ( expression ) .)
    /               reduce using rule 8 (expression -> ( expression ) .)
    ^               reduce using rule 8 (expression -> ( expression ) .)
    $end            reduce using rule 8 (expression -> ( expression ) .)
    )               reduce using rule 8 (expression -> ( expression ) .)


state 24

    (10) pow_exp -> pow_exp + . pow_exp
    (10) pow_exp -> . pow_exp + pow_exp
    (11) pow_exp -> . pow_exp - pow_exp
    (12) pow_exp -> . pow_exp * pow_exp
    (13) pow_exp -> . pow_exp / pow_exp
    (14) pow_exp -> . - pow_exp
    (15) pow_exp -> . ( pow_exp )
    (16) pow_exp -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    -               shift and go to state 20
    (               shift and go to state 21
    NUMBER          shift and go to state 6

    pow_exp                        shift and go to state 30
    number                         shift and go to state 22

state 25

    (11) pow_exp -> pow_exp - . pow_exp
    (10) pow_exp -> . pow_exp + pow_exp
    (11) pow_exp -> . pow_exp - pow_exp
    (12) pow_exp -> . pow_exp * pow_exp
    (13) pow_exp -> . pow_exp / pow_exp
    (14) pow_exp -> . - pow_exp
    (15) pow_exp -> . ( pow_exp )
    (16) pow_exp -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    -               shift and go to state 20
    (               shift and go to state 21
    NUMBER          shift and go to state 6

    pow_exp                        shift and go to state 31
    number                         shift and go to state 22

state 26

    (12) pow_exp -> pow_exp * . pow_exp
    (10) pow_exp -> . pow_exp + pow_exp
    (11) pow_exp -> . pow_exp - pow_exp
    (12) pow_exp -> . pow_exp * pow_exp
    (13) pow_exp -> . pow_exp / pow_exp
    (14) pow_exp -> . - pow_exp
    (15) pow_exp -> . ( pow_exp )
    (16) pow_exp -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    -               shift and go to state 20
    (               shift and go to state 21
    NUMBER          shift and go to state 6

    pow_exp                        shift and go to state 32
    number                         shift and go to state 22

state 27

    (13) pow_exp -> pow_exp / . pow_exp
    (10) pow_exp -> . pow_exp + pow_exp
    (11) pow_exp -> . pow_exp - pow_exp
    (12) pow_exp -> . pow_exp * pow_exp
    (13) pow_exp -> . pow_exp / pow_exp
    (14) pow_exp -> . - pow_exp
    (15) pow_exp -> . ( pow_exp )
    (16) pow_exp -> . number
    (17) number -> . - NUMBER
    (18) number -> . NUMBER

    -               shift and go to state 20
    (               shift and go to state 21
    NUMBER          shift and go to state 6

    pow_exp                        shift and go to state 33
    number                         shift and go to state 22

state 28

    (14) pow_exp -> - pow_exp .
    (10) pow_exp -> pow_exp . + pow_exp
    (11) pow_exp -> pow_exp . - pow_exp
    (12) pow_exp -> pow_exp . * pow_exp
    (13) pow_exp -> pow_exp . / pow_exp

    +               reduce using rule 14 (pow_exp -> - pow_exp .)
    -               reduce using rule 14 (pow_exp -> - pow_exp .)
    *               reduce using rule 14 (pow_exp -> - pow_exp .)
    /               reduce using rule 14 (pow_exp -> - pow_exp .)
    ^               reduce using rule 14 (pow_exp -> - pow_exp .)
    $end            reduce using rule 14 (pow_exp -> - pow_exp .)
    )               reduce using rule 14 (pow_exp -> - pow_exp .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! *               [ shift and go to state 26 ]
  ! /               [ shift and go to state 27 ]


state 29

    (15) pow_exp -> ( pow_exp . )
    (10) pow_exp -> pow_exp . + pow_exp
    (11) pow_exp -> pow_exp . - pow_exp
    (12) pow_exp -> pow_exp . * pow_exp
    (13) pow_exp -> pow_exp . / pow_exp

    )               shift and go to state 34
    +               shift and go to state 24
    -               shift and go to state 25
    *               shift and go to state 26
    /               shift and go to state 27


state 30

    (10) pow_exp -> pow_exp + pow_exp .
    (10) pow_exp -> pow_exp . + pow_exp
    (11) pow_exp -> pow_exp . - pow_exp
    (12) pow_exp -> pow_exp . * pow_exp
    (13) pow_exp -> pow_exp . / pow_exp

    +               reduce using rule 10 (pow_exp -> pow_exp + pow_exp .)
    -               reduce using rule 10 (pow_exp -> pow_exp + pow_exp .)
    ^               reduce using rule 10 (pow_exp -> pow_exp + pow_exp .)
    $end            reduce using rule 10 (pow_exp -> pow_exp + pow_exp .)
    )               reduce using rule 10 (pow_exp -> pow_exp + pow_exp .)
    *               shift and go to state 26
    /               shift and go to state 27

  ! *               [ reduce using rule 10 (pow_exp -> pow_exp + pow_exp .) ]
  ! /               [ reduce using rule 10 (pow_exp -> pow_exp + pow_exp .) ]
  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]


state 31

    (11) pow_exp -> pow_exp - pow_exp .
    (10) pow_exp -> pow_exp . + pow_exp
    (11) pow_exp -> pow_exp . - pow_exp
    (12) pow_exp -> pow_exp . * pow_exp
    (13) pow_exp -> pow_exp . / pow_exp

    +               reduce using rule 11 (pow_exp -> pow_exp - pow_exp .)
    -               reduce using rule 11 (pow_exp -> pow_exp - pow_exp .)
    ^               reduce using rule 11 (pow_exp -> pow_exp - pow_exp .)
    $end            reduce using rule 11 (pow_exp -> pow_exp - pow_exp .)
    )               reduce using rule 11 (pow_exp -> pow_exp - pow_exp .)
    *               shift and go to state 26
    /               shift and go to state 27

  ! *               [ reduce using rule 11 (pow_exp -> pow_exp - pow_exp .) ]
  ! /               [ reduce using rule 11 (pow_exp -> pow_exp - pow_exp .) ]
  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]


state 32

    (12) pow_exp -> pow_exp * pow_exp .
    (10) pow_exp -> pow_exp . + pow_exp
    (11) pow_exp -> pow_exp . - pow_exp
    (12) pow_exp -> pow_exp . * pow_exp
    (13) pow_exp -> pow_exp . / pow_exp

    +               reduce using rule 12 (pow_exp -> pow_exp * pow_exp .)
    -               reduce using rule 12 (pow_exp -> pow_exp * pow_exp .)
    *               reduce using rule 12 (pow_exp -> pow_exp * pow_exp .)
    /               reduce using rule 12 (pow_exp -> pow_exp * pow_exp .)
    ^               reduce using rule 12 (pow_exp -> pow_exp * pow_exp .)
    $end            reduce using rule 12 (pow_exp -> pow_exp * pow_exp .)
    )               reduce using rule 12 (pow_exp -> pow_exp * pow_exp .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! *               [ shift and go to state 26 ]
  ! /               [ shift and go to state 27 ]


state 33

    (13) pow_exp -> pow_exp / pow_exp .
    (10) pow_exp -> pow_exp . + pow_exp
    (11) pow_exp -> pow_exp . - pow_exp
    (12) pow_exp -> pow_exp . * pow_exp
    (13) pow_exp -> pow_exp . / pow_exp

    +               reduce using rule 13 (pow_exp -> pow_exp / pow_exp .)
    -               reduce using rule 13 (pow_exp -> pow_exp / pow_exp .)
    *               reduce using rule 13 (pow_exp -> pow_exp / pow_exp .)
    /               reduce using rule 13 (pow_exp -> pow_exp / pow_exp .)
    ^               reduce using rule 13 (pow_exp -> pow_exp / pow_exp .)
    $end            reduce using rule 13 (pow_exp -> pow_exp / pow_exp .)
    )               reduce using rule 13 (pow_exp -> pow_exp / pow_exp .)

  ! +               [ shift and go to state 24 ]
  ! -               [ shift and go to state 25 ]
  ! *               [ shift and go to state 26 ]
  ! /               [ shift and go to state 27 ]


state 34

    (15) pow_exp -> ( pow_exp ) .

    +               reduce using rule 15 (pow_exp -> ( pow_exp ) .)
    -               reduce using rule 15 (pow_exp -> ( pow_exp ) .)
    *               reduce using rule 15 (pow_exp -> ( pow_exp ) .)
    /               reduce using rule 15 (pow_exp -> ( pow_exp ) .)
    ^               reduce using rule 15 (pow_exp -> ( pow_exp ) .)
    $end            reduce using rule 15 (pow_exp -> ( pow_exp ) .)
    )               reduce using rule 15 (pow_exp -> ( pow_exp ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 13 resolved using rule (number -> - NUMBER)
WARNING: rejected rule (number -> NUMBER) in state 13
